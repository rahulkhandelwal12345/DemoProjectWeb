package com.demo.setup;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.demo.testcases.LoginTest;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseSelenium {
	public static WebDriver driver;
	public Properties properties;
	Logger logger = Logger.getLogger(BaseSelenium.class);

	public BaseSelenium() {
		String filepath = System.getProperty("user.dir") + "\\src\\test\\java\\com\\demo\\properties\\demo.properties";
		properties = new Properties();
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(filepath);
			properties.load(fis);
			logger.info("Property file loaded successfully");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fis != null) {
				try {
					fis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	@BeforeClass
	public void setup() {
		BaseSelenium base = new BaseSelenium();
		String browser_name = properties.getProperty("browser_name");
		logger.info("Browser name type =" + " " + browser_name);
		if (browser_name.equals("chrome")) {
			String cromedriverPath = System.getProperty("user.dir") + "\\driver\\chromedriver.exe";
			System.setProperty("webdriver.chrome.driver", cromedriverPath);
			driver = new ChromeDriver();

			/*
			 * 2nd way to initilize the chrome driver add webdriver manager dependency on
			 * pom.xml WebDriverManager.chromedriver().setup();
			 */
			logger.info("Chrome driver executed successfully");
		} else if (browser_name.equals("firefox")) {
			String geckodriverPath = System.getProperty("user.dir") + "\\driver\\geckodriver.exe";
			System.setProperty("webdriver.gecko.driver", geckodriverPath);
			driver = new FirefoxDriver();

			/*
			 * 2nd way to initilize the firefox driver add webdriver manager dependency on
			 * pom.xml WebDriverManager.firefoxdriver().setup();
			 */
			logger.info("Fire fox browseer executed successfully");

		} else {
			throw new IllegalArgumentException("Invalid browser type: " + browser_name);
		}
		driver.manage().deleteAllCookies();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		driver.get(properties.getProperty("app_url"));
		logger.info("Url is opening successfully");

	}

	public static void screenshot() {
		File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		try {
			String destination_path = System.getProperty("user.dir");
			FileUtils.copyFile(screenshot, new File(destination_path + "\\screenshot\\" + "failedscreenshot.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

//	@AfterClass
//	public void tearDown() {
//
//		if (driver != null) {
//			driver.quit();
//			logger.info("Browser instance closed successfully");
//		}
//	}

}